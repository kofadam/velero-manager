---
# CronJob to rotate service account tokens weekly
apiVersion: batch/v1
kind: CronJob
metadata:
  name: token-rotation-controller
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/component: token-rotation
spec:
  schedule: "0 3 * * 0" # Every Sunday at 3 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: velero
            app.kubernetes.io/component: token-rotation
        spec:
          serviceAccountName: token-rotation-sa
          containers:
            - name: token-rotator
              image: harbor.mydomain.local/library/kubectl:1.29
              command:
                - /bin/bash
                - -c
                - |
                  set -euo pipefail

                  echo "🔄 Starting token rotation process..."

                  # Function to rotate token for a cluster
                  rotate_token() {
                    local cluster_name=$1
                    local secret_name="${cluster_name}-sa-token"

                    echo "Processing cluster: $cluster_name"

                    # Get cluster credentials from existing secret
                    SERVER=$(kubectl get secret $secret_name -n velero -o jsonpath='{.data.server}' | base64 -d)
                    OLD_TOKEN=$(kubectl get secret $secret_name -n velero -o jsonpath='{.data.token}' | base64 -d)
                    CA_CERT=$(kubectl get secret $secret_name -n velero -o jsonpath='{.data.ca\.crt}')

                    # Create kubeconfig for guest cluster
                    cat > /tmp/kubeconfig-$cluster_name <<EOF
                  apiVersion: v1
                  kind: Config
                  clusters:
                  - cluster:
                      certificate-authority-data: $CA_CERT
                      server: $SERVER
                    name: $cluster_name
                  contexts:
                  - context:
                      cluster: $cluster_name
                      user: velero-sa
                    name: $cluster_name
                  current-context: $cluster_name
                  users:
                  - name: velero-sa
                    user:
                      token: $OLD_TOKEN
                  EOF

                    export KUBECONFIG=/tmp/kubeconfig-$cluster_name

                    # Delete old token secret on guest cluster
                    kubectl delete secret velero-remote-trigger-token -n velero --ignore-not-found

                    # Create new token secret
                    kubectl apply -f - <<TOKENEOF
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: velero-remote-trigger-token
                    namespace: velero
                    annotations:
                      kubernetes.io/service-account.name: velero-remote-trigger
                      rotated-at: "$(date -Iseconds)"
                  type: kubernetes.io/service-account-token
                  TOKENEOF

                    # Wait for token generation
                    sleep 5

                    # Extract new token
                    NEW_TOKEN=$(kubectl get secret velero-remote-trigger-token -n velero -o jsonpath='{.data.token}' | base64 -d)

                    # Update secret on management cluster
                    unset KUBECONFIG
                    kubectl patch secret $secret_name -n velero --type='json' \
                      -p='[{"op": "replace", "path": "/data/token", "value": "'$(echo -n $NEW_TOKEN | base64 -w0)'"}]'

                    # Add rotation timestamp
                    kubectl annotate secret $secret_name -n velero \
                      last-rotation="$(date -Iseconds)" \
                      --overwrite

                    echo "✅ Token rotated for cluster: $cluster_name"
                  }

                  # Get all cluster secrets
                  CLUSTERS=$(kubectl get secrets -n velero -l "type=cluster-token" -o jsonpath='{.items[*].metadata.name}')

                  for secret in $CLUSTERS; do
                    cluster_name=$(echo $secret | sed 's/-sa-token$//')
                    rotate_token $cluster_name || echo "⚠️ Failed to rotate token for $cluster_name"
                  done

                  echo "🎉 Token rotation complete"

                  # Send notification (optional - integrate with your alerting system)
                  # curl -X POST $WEBHOOK_URL -d "Token rotation completed at $(date)"
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "100m"
                limits:
                  memory: "128Mi"
                  cpu: "200m"
          restartPolicy: OnFailure

---
# ServiceAccount for token rotation controller
---; 140i---; 151i---; 167i---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: token-rotation-sa
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/component: token-rotation

---
# RBAC for token rotation controller
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: token-rotation-role
  namespace: velero
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "patch", "update"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: token-rotation-rolebinding
  namespace: velero
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: token-rotation-role
subjects:
  - kind: ServiceAccount
    name: token-rotation-sa
    namespace: velero

---
# ConfigMap for rotation configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: token-rotation-config
  namespace: velero
data:
  rotation-interval: "168h" # 7 days
  alert-webhook: "https://your-webhook.internal/token-rotated"
  max-token-age: "720h" # 30 days - force rotation if older
