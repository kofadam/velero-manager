apiVersion: v1
kind: ServiceAccount
metadata:
  name: alloy
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alloy
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
      - pods/log
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources:
      - configmaps
    verbs: ["get"]
  - apiGroups: [""]
    resources:
      - namespaces
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alloy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alloy
subjects:
  - kind: ServiceAccount
    name: alloy
    namespace: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
data:
  config.alloy: |
    // Scrape Velero Manager metrics
    prometheus.scrape "velero_manager" {
      targets = [
        {
          "__address__" = "velero-manager.velero-manager.svc.cluster.local:80",
          "__metrics_path__" = "/metrics",
          "job" = "velero-manager",
        },
      ]
      forward_to = [prometheus.remote_write.prometheus.receiver]
      scrape_interval = "30s"
    }

    // Send metrics to Prometheus
    prometheus.remote_write "prometheus" {
      endpoint {
        url = "http://kube-prom-stack-kube-prome-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
      }
    }

    // Discover pods for logs
    discovery.kubernetes "pods" {
      role = "pod"
      namespaces {
        names = ["velero", "velero-manager"]
      }
    }

    // Add labels to discovered pods
    discovery.relabel "pods" {
      targets = discovery.kubernetes.pods.targets

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label = "namespace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label = "pod"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label = "container"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        target_label = "__path__"
        separator = "/"
        replacement = "/var/log/pods/*$1/*.log"
      }
    }

    // Collect logs
    loki.source.kubernetes "pods" {
      targets    = discovery.relabel.pods.output
      forward_to = [loki.process.logs.receiver]
    }

    // Process logs
    loki.process "logs" {
      forward_to = [loki.write.loki.receiver]

      // Parse log levels
      stage.regex {
        expression = "(?P<level>ERROR|WARN|INFO|DEBUG|error|warn|info|debug|Failed|Completed)"
      }

      // Parse Gin logs
      stage.regex {
        expression = `\[GIN\].*\|\s+(?P<status_code>\d{3})\s+\|.*\|\s+(?P<method>\w+)\s+"`
      }

      // Extract cluster name from backup names (remove -centralized-* or -daily-backup-*)
      stage.regex {
        expression = `(?P<cluster_from_backup>(?:[a-zA-Z0-9-]+))(?:-centralized-|-daily-backup-)`
      }

      // Extract cluster name from various log patterns
      stage.regex {
        expression = `backup[=:]?\s*"?(?P<cluster_from_log>(?:[a-zA-Z0-9-]+))(?:-centralized|-daily)`
      }

      // Add labels from regex extraction
      stage.labels {
        values = {
          level = "",
          status_code = "",
          method = "",
        }
      }

      // Set cluster label to extracted value or remove if empty
      stage.template {
        source = "cluster"
        template = `{{ if .cluster_from_backup }}{{ .cluster_from_backup }}{{ else if .cluster_from_log }}{{ .cluster_from_log }}{{ end }}`
      }

      // Remove temporary extraction labels and empty cluster labels
      stage.label_drop {
        values = ["cluster_from_backup", "cluster_from_log", "cluster"]
      }

      // Re-add cluster label only if it has a value
      stage.labels {
        values = {
          cluster = "",
        }
      }

      // Add static labels
      stage.static_labels {
        values = {
          job = "velero-logs",
        }
      }
    }
    // Write logs to Loki
    loki.write "loki" {
      endpoint {
        url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
      }
    }

    // Self monitoring
    prometheus.exporter.self "alloy" {}

    prometheus.scrape "alloy_self" {
      targets = prometheus.exporter.self.alloy.targets
      forward_to = [prometheus.remote_write.prometheus.receiver]
      scrape_interval = "60s"
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: alloy
  namespace: monitoring
  labels:
    app: alloy
spec:
  selector:
    matchLabels:
      app: alloy
  template:
    metadata:
      labels:
        app: alloy
    spec:
      serviceAccountName: alloy
      hostPID: true
      containers:
        - name: alloy
          image: grafana/alloy:v1.4.2
          args:
            - run
            - /etc/alloy/config.alloy
            - --server.http.listen-addr=0.0.0.0:12345
            - --storage.path=/var/lib/alloy
          ports:
            - containerPort: 12345
              name: http-metrics
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: data
              mountPath: /var/lib/alloy
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
            limits:
              cpu: 500m
              memory: 500Mi
          securityContext:
            runAsUser: 0
            privileged: true
      volumes:
        - name: config
          configMap:
            name: alloy-config
        - name: varlog
          hostPath:
            path: /var/log
        - name: data
          hostPath:
            path: /var/lib/alloy
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: alloy
  namespace: monitoring
  labels:
    app: alloy
spec:
  ports:
    - port: 12345
      targetPort: 12345
      name: http-metrics
  selector:
    app: alloy
